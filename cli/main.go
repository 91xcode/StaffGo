package main

import (
	"code.be.staff.com/staff/StaffGo/public/httpclient"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
)

const apiUrl = "https://gank.io/api/v2/hot/%s/category/%s/count/%d"

var (
	ErrResponse = errors.New("response error")
)

type AutoGenerated struct {
	Category string `json:"category"`
	Data     []struct {
		ID          string   `json:"_id"`
		Author      string   `json:"author"`
		Category    string   `json:"category"`
		CreatedAt   string   `json:"createdAt"`
		Desc        string   `json:"desc"`
		Images      []string `json:"images"`
		LikeCounts  int      `json:"likeCounts"`
		PublishedAt string   `json:"publishedAt"`
		Stars       int      `json:"stars"`
		Title       string   `json:"title"`
		Type        string   `json:"type"`
		URL         string   `json:"url"`
		Views       int      `json:"views"`
	} `json:"data"`
	Hot    string `json:"hot"`
	Status int    `json:"status"`
}

func main() {
	var hot_type string
	var category string
	var count int

	flag.StringVar(&hot_type, "ht", "likes", "可接受参数 views（浏览数） | likes（点赞数） | comments（评论数）")

	flag.StringVar(&category, "ca", "Girl", "可接受参数 Article | GanHuo | Girl")
	flag.IntVar(&count, "co", 10, "可接受参数 [0,20]")
	flag.Parse()

	uri := fmt.Sprintf(apiUrl, hot_type, category, count)

	fmt.Printf("uri:%s \n", uri)

	resp, err := httpclient.Get(uri, nil)
	if err != nil {
		fmt.Printf("err was %v", err)
		return
	}
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		fmt.Printf("ErrResponse was %v", ErrResponse)
		return
	}

	respone := AutoGenerated{}
	if err := json.Unmarshal(body, &respone); err != nil {
		fmt.Printf("\nError message: %v", err)
		return
	}

	//fmt.Printf("respone:%+v \n", respone)


	for _,item:=range respone.Data{
		fmt.Printf("Image:%+v \n", item.Images[0])
	}

}
